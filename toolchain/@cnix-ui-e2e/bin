#!/usr/bin/env node
const debug = require('debug')('@cnix-ui/e2e');
const execa = require('execa');
const path = require('path');
const waitOn = require('wait-on');

const kebabCase = string => string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/\s+/g, '-').toLowerCase()

const parseArgs = (argv, defs) => [argv, Object.entries(defs).reduce((prev, [name, type]) => {
    const isBool = type === Boolean;
    const index = argv.findIndex((arg) => arg === `--${kebabCase(name)}`);
    let value;
    if (index !== -1) {
      value = argv[index + (1 - isBool)];
      argv.splice(index, 2 - isBool);      
    }
    return {...prev, [name]: type(value)}
  }, {})]
 
const [argv, {
  port, dev
}] = parseArgs(process.argv.slice(2), {
  port: Number,
  dev: Boolean
});

const [pattern, ...restArgs] = argv;

const args = {
  common: [
    '--config-file', 'false',
    '--config', [
      `projectId="${path.basename(process.cwd())}"`,
      `testFiles="${pattern}"`,
      `baseUrl="http://localhost:${port}/"`,
      `integrationFolder="${path.resolve(process.cwd())}"`,
      `screenshotsFolder="${path.resolve(process.cwd(), 'screenshoots')}"`,
      `videosFolder="${path.resolve(process.cwd(), 'screencasts')}"`,
      `pluginsFile="${path.resolve(__dirname, 'plugins')}"`,
      `supportFile="${path.resolve(__dirname, 'support')}"`
    ].join(','),
    '--env', `host=localhost,port=${port}`,
    ...restArgs,
  ],
  open: [

  ],
  run: [
    '--headless'
  ],
};

const cmd = dev ? 'open' : 'run';
const binPath = path.resolve(__dirname, 'node_modules', '.bin', 'cypress');

const main = async () => {
  if (port) {
    await waitOn({
      resources: [`http://localhost:${port}`],
      timeout: 50000,
    });
  }

  const cypressArgv = [
    cmd,
    ...args.common,
    ...args[cmd],
  ];

  debug('launching "%s"', cypressArgv.slice(1).join(' '));

  execa(binPath, cypressArgv, {
    cwd: process.cwd(),
    stdio: [0, 1, 2],
  }).catch(({ exitCode, message }) => {
    console.error(message);
    process.exit(exitCode);
  });
};
main();
